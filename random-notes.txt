all cycles in fast cycles

audio:
	play ch3 at 2097152/114 = ~18396Hz = one sample per 114 cycles
	one line is 228 cycles so it plays one byte (two samples) every line.
	When each sample is played, it must be modulated
	using a combination of the available volume controls:
		The actual value, between 0 and 15
		The master volume for each output channel, between 0 and 7

	So upkeep for audio is volume adjust every half a line and new sample
	every line, including during vblank (vblank is 10 lines).

palettes:
	Update palettes each line during hblank or OAM search.
	Total time: at most 142 cycles, less if sprites or window present on prev line.
	But we need to spend probably 4 cycles of that updating the audio volume at the correct time.
	So actual limit is 138.
	We only need to update background palettes.
	Quick time estimate:
		ld A, [HL+]
		ld [C], A
		is 4 cycles/byte
		(abusing SP isn't any better)
		so we have 256 cycles for an entire palette swap. too long.

		We can update half of the palettes each cycle.

	Palette data compression:
		Storing every single full set of 4 palettes with each line of each frame is way
		too expensive on ROM.
		Storing a list of 4 palettes for each line then referring to a table of unique palettes
		is better, but takes too long to resolve into actual lists of 4 palettes.
		Instead, we store a single index which refers to a table of groups of 4 palettes.

tile map:
	We can't afford any DMA during hblank as we simply can't spare 16 whole cycles.
	Instead, we'll have to update the map during vblank.
	vblank lasts 2280 cycles, of which we have 10 long audio updates and 10 short ones.
	Short ones are 3 cycles:
		ld A, R
		ld [C], A
	Long ones will need to load next sample, next pair of vols (put the latter in R)...
	estimate 20 cycles.
	Then left over time is:
		2280 - 20*10 - 4*10 = 2040
	We need to use 1152 of this to copy background map, leaving 888.

tile data:
	We have 888 cycles to work with. Assume it takes ~16 cycles to set up DMA, let's aim
	for 50 tiles able to be DMA'd in one go, or less (with one tile less per independent DMA).
	This leaves us with 88 cycles of slack just in case.

	Compression:
		Instead of 50 every frame (huge amount of rom!), we allow frame data to specify a load
		of up to 50 tiles from ROM, into an arbitrary tile area.
		eg. "load N tiles from (rom bank, offset) to (vram bank, offset)"
		Could allow multiple runs. Would need to validate to ensure it doesn't run over time.

left over cycles:
	Not counting the slack at the end of each vblank, we have 86 cycles/line.
	As above, let's estimate 20 of those must be spent on audio upkeep.
	Then the total time we have to:
		* Decide the next frame
		* Decode the next frame into RAM
		* Anything else
	is 66*144 = 9504/frame

ROM usage:
	audio: ~1 bytes/sample * 18396 samples/sec = 18396b/sec
	In one bank, we can hold 16384b / 18396b/sec = ~0.89sec
	This is 67.37 banks/min. 3min audio: 202 banks. 5min audio: 336 banks.

	tile data: 1024 tiles/bank. Probably only need 1-2 banks.

	palette group data:
		Each palette group is 32b. We can fit 512 in a bank.
		Maybe will need up to 4-8 banks.

	tile and palette map:
		Ideally packed, each frame is:
			21*19 tiles * 2b/tile + 1 palette group/line * 2b/palette group * 144 lines
			= 798b + 228b = 1086b
		which can fit 8 frames/bank (though not 16, sadly).
		However, to facilitate DMA, each row needs to have 11b of junk on the end.
		With junk included:
			32*19 tiles * 2b/tile = 1216 + previous for palette = 1504
		Also +1 byte which holds scroll values, 0-7 in each direction.
		Also a list of tile load orders, a few bytes each.

	So we can pack 8 frames in a bank, so with ~200 banks we have ~1600 unique frames.

	other stuff:
		flow control deciding what frames to show and when, loops, etc. unlikely to need a whole
		bank.
